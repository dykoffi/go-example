version: 2.1

executors:
  docker-executor:
    environment:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    docker:
      - image: cimg/go:1.21.0
  machine-executor:
    environment:
      DOCKER_USER: dykoffi
      PROJECT_NAME: go-example
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true

commands:
  restore_cache_cmd:
    steps:
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
  save_cache_cmd:
    steps:
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
  install_deps_cmd:
    steps:
      - run: go mod download
  install_or_update_testers_and_checkers_cmd:
    steps:
      - run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - run: go install honnef.co/go/tools/cmd/staticcheck@latest
  run_tests_cmd:
    steps:
      - run: mkdir -p /tmp/test-reports
      - run: mkdir -p /tmp/artifacts
      - run: govulncheck ./... > /tmp/artifacts/vulnerabilities.txt
      - run: staticcheck ./... > /tmp/artifacts/performances.txt
      - run: go test -bench . ./tests > /tmp/artifacts/benchmarks.txt
      - run: gotestsum --junitfile /tmp/test-reports/unit-tests.xml -- ./tests

  build_and_deploy_docker_image_cmd:
    steps:
      - run: docker login -u ${DOCKER_USER} -p ${PERSONAL_DOCKER_TOKEN}
      - run: docker build -t ${DOCKER_USER}/${PROJECT_NAME} .
      - run: docker push ${DOCKER_USER}/${PROJECT_NAME}
  sonarqube_scan:
    steps:
      - run: |
          docker run \
          -e SONAR_HOST_URL="${SONARQUBE_URL}" \
          -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${SONARQUBE_PROJECT_KEY}" \
          -e SONAR_TOKEN="${SONARQUBE_PROJECT_SECRET}" \
          -v "$(pwd):/usr/src" \
          sonarsource/sonar-scanner-cli 

jobs:
  test_and_build:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_cmd
      - install_deps_cmd
      - save_cache_cmd
      - install_or_update_testers_and_checkers_cmd
      - run_tests_cmd
      - store_test_results:
          path: /tmp/test-reports
      - run: go build -tags netgo -a -v -ldflags='-s' -o app .
      - store_artifacts:
          path: /tmp/artifacts
      - persist_to_workspace:
          root: .
          paths:
            - ./public
            - dockerfile
            - app

  deploy_on_dockerhub:
    executor: machine-executor
    steps:
      - attach_workspace:
          at: .
      - sonarqube_scan
      - build_and_deploy_docker_image_cmd

  update_application:
    executor: machine-executor
    steps:
      - run: ssh
      - run: wget "${NOTIFICATION_URL}?version=${VERSION}&app=${APP}"

workflows:
  test_deploy_update:
    jobs:
      - test_and_build:
          context: Global
      - deploy_on_dockerhub:
          requires:
            - test_and_build
          context: Global
          filters:
            branches:
              only:
                - main
                - release
      - update_application:
          requires:
            - test_and_build
          filters:
            branches:
              only: main
version: 2.1

executors:
  docker-executor:
    environment:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    docker:
      - image: cimg/go:1.21.0
  machine-executor:
    environment:
      DOCKER_USER: dykoffi
      PROJECT_NAME: go-example
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true

jobs:
  static_test:
    executor: docker-executor
    steps:
      - checkout

      # Caching and deps installation
      - restore_cache:
          key: &deps-cache go-mod-v4-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: *deps-cache
          paths:
            - "~/go/pkg/mod"
      - run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - run: go install honnef.co/go/tools/cmd/staticcheck@latest

      # Run test
      - run: mkdir -p /tmp/test-reports
      - run: mkdir -p /tmp/artifacts
      - run: govulncheck ./... > /tmp/artifacts/vulnerabilities.txt
      - run: staticcheck ./... > /tmp/artifacts/performances.txt
      - run: go test -bench . ./tests > /tmp/artifacts/benchmarks.txt
      - run: gotestsum --junitfile /tmp/test-reports/unit-tests.xml -- ./tests

      # Build Application
      # - run: go build -tags netgo -a -v -ldflags='-s' -o app .

      # Store tests results and artifacts
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/artifacts

  sonar_trivy_test:
    executor: machine-executor
    steps:
      - checkout

      # Run trivy test
      - run: mkdir -p /tmp/tests
      - run:
          name: install trivy
          command: |
            wget https://github.com/aquasecurity/trivy/releases/download/v0.45.1/trivy_0.45.1_Linux-64bit.deb
            sudo dpkg -i trivy_0.45.1_Linux-64bit.deb
      - run: trivy config --format template --template "@security/junit.tpl" -o tmp/tests/config-report.xml .
      - run: trivy fs --format template --template "@security/junit.tpl" -o tmp/tests/fs-report.xml .
      - run: trivy rootfs --format template --template "@security/junit.tpl" -o tmp/tests/rootfs-report.xml .
      - store_test_results:
          path: /tmp/tests
      
      # Run sonarQube test
      - run: |
          docker run \
          -e SONAR_HOST_URL="${SONARQUBE_URL}" \
          -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${SONARQUBE_PROJECT_KEY}" \
          -e SONAR_TOKEN="${SONARQUBE_PROJECT_SECRET}" \
          -v "$(pwd):/usr/src" \
          sonarsource/sonar-scanner-cli

  test:
    executor: docker-executor
    steps:
      - run: echo "All is working"

workflows:
  test_deploy_update:
    jobs:
      - sonar_trivy_test
      - static_test:
          context: Global
      - test:
          requires:
            - static_test
            - sonar_trivy_test